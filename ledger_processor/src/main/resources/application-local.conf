include required("application.conf")

// for local / docker-compose
akka.management.http {
  // when in Docker network, this should be equal to the container name (DNS alias to docker assigned IP)
  hostname = ${ledger-settings.cluster-discovery.service-name}
  // when in Docker network, this should be equal to akka.management.http.bind-port
  port = ${akka.management.http.bind-port}
}
akka.remote.artery.canonical {
  // when in Docker network, this should be equal to the container name (DNS alias to docker assigned IP)
  hostname = ${ledger-settings.cluster-discovery.service-name}
  // when in Docker network, this should be equal to akka.remote.artery.bind.port
  port = ${akka.remote.artery.bind.port}
}
akka.discovery.config.services {
  openledger = {
    endpoints = [
      {
        // when in Docker network, this should be equal to the
        // leader's container name (DNS alias to docker assigned IP)
        host = ${ledger-settings.cluster-discovery.service-name}
        // when in Docker network, this should be equal to akka.management.http.bind-port
        // assuming cluster is configured identically
        port = ${akka.management.http.bind-port}
      }
    ]
  }
}

ledger-settings {
  processor {
    timeout = 30s
  }
  cluster-discovery {
    required-contact-point-nr = 1
    service-name = "openledger"
    discovery-method = config
  }

  database {
    host = "postgres"
    port = 5432
    name = "openledger_db"
    schema = "public"
    username = "openledger_user"
    password = "openledger_password"
    number-of-connections = 10
  }
  kafka {
    incoming {
      topics = ["openledger_incoming"]
      message-per-second = 1000
      client {
        enable.auto.commit = false
        bootstrap.servers = "kafka:9092"
        group.id = "openledger_processor"
        //        security.protocol = SSL
        //        ssl.truststore.location = /trust-stores/kafka.client.truststore.jks
      }
    }
    outgoing {
      topic = "openledger_outgoing"
      buffer-size = 100
      client {
        bootstrap.servers = "kafka:9092"
        //        security.protocol = SSL
        //        ssl.truststore.location = /trust-stores/kafka.client.truststore.jks
      }
    }
  }
}