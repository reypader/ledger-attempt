akka.kafka.producer {
  # Set a service name for use with Akka Discovery
  # https://doc.akka.io/docs/alpakka-kafka/current/discovery.html
  service-name = ""

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.
  kafka-clients : ${ledger-settings.kafka.outgoing.client}
}

akka.kafka.consumer {
  # Set a service name for use with Akka Discovery
  # https://doc.akka.io/docs/alpakka-kafka/current/discovery.html
  service-name = ""

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients : ${ledger-settings.kafka.incoming.client}

}

akka.kafka.committer {
  # Maximum interval between commits
  max-interval = 1s
}

akka.cluster.sharding {

  # Set this to a time duration to have sharding passivate entities when they have not
  # received any message in this length of time. Set to 'off' to disable.
  # It is always disabled if `remember-entities` is enabled.
  passivate-idle-entity-after = 30s

  # The id of the dispatcher to use for ClusterSharding actors.
  # If specified you need to define the settings of the actual dispatcher.
  # This dispatcher for the entity actors is defined by the user provided
  # Props, i.e. this dispatcher is not used for the entity actors.
  use-dispatcher = "akka.actor.internal-dispatcher"

  # Config path of the lease that each shard must acquire before starting entity actors
  # default is no lease
  # A lease can also be used for the singleton coordinator by settings it in the coordinator-singleton properties
  use-lease = ""

  # The interval between retries for acquiring the lease
  lease-retry-interval = 5s

  # Number of shards used by the default HashCodeMessageExtractor
  # when no other message extractor is defined. This value must be
  # the same for all nodes in the cluster and that is verified by
  # configuration check when joining. Changing the value requires
  # stopping all nodes in the cluster.
  number-of-shards = 1000
}

akka {
  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}

akka-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        url = ${ledger-settings.database.url}
        user = ${ledger-settings.database.username}
        password = ${ledger-settings.database.password}
        driver = "org.postgresql.Driver"
        numThreads = ${ledger-settings.database.number-of-connections}
        maxConnections = ${akka-persistence-jdbc.shared-databases.slick.db.numThreads}
        minConnections = ${akka-persistence-jdbc.shared-databases.slick.db.numThreads}
      }
    }
  }
}

jdbc-journal {
  use-shared-db = "slick"
}

jdbc-snapshot-store {
  use-shared-db = "slick"
}

jdbc-read-journal {
  use-shared-db = "slick"
}

ledger-settings {
  processor {
    timeout = 30s
  }
  database {
    url = ""
    username = ""
    password = ""
    number-of-connections = 10
  }
  kafka {
    incoming {
      topics = ["A", "B"]
      message-per-second = 10
      client {
        enable.auto.commit = false
        bootstrap.servers = "b-1.production-issuin.2sd3yv.c3.kafka.ap-southeast-1.amazonaws.com:9094,b-2.production-issuin.2sd3yv.c3.kafka.ap-southeast-1.amazonaws.com:9094"
//        security.protocol = SSL
//        ssl.truststore.location = /trust-stores/kafka.client.truststore.jks
      }
    }
    outgoing {
      topic = "A"
      buffer-size = 100
      client {
        bootstrap.servers = "b-1.production-issuin.2sd3yv.c3.kafka.ap-southeast-1.amazonaws.com:9094,b-2.production-issuin.2sd3yv.c3.kafka.ap-southeast-1.amazonaws.com:9094"
//        security.protocol = SSL
//        ssl.truststore.location = /trust-stores/kafka.client.truststore.jks
      }
    }
  }
}